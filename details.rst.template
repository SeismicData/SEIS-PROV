Detailed Definitions
--------------------

This section details the *SEIS-PROV* types and expected attributes and
constraints.

.. contents::
    :local:
    :depth: 1

Common Properties
^^^^^^^^^^^^^^^^^
* All identifiers associated with *SEIS PROV* have to live in the ``seis_prov``
  namespace. The identifiers have to be unique and the recommended form of the
  identifiers, as a regular expression, is
  ``seis_prov:[a-z]{{2}}_[A-Z0-9-]{{10}}`` (``seis_prov:`` followed by a two
  letter description of the entity, activity, ..., followed by an underscore
  and 10 uppercase alphanumeric letters.). The two letter description has the
  purpose to yield a minimal descriptive identifier while still keeping its
  total length fairly short. The description of each record will note the
  recommended two letter code.
* It is recommended to add a human readable ``prov:label`` to each entity,
  activity, and agent. It enables the generation of more descriptive graphs
  which will most likely be the representation that is consumed by the end
  users.
* In an effort to reduce the amount of text or information to parse, stations
  are identified via their SEED identifier, e.g. the dot seperated network,
  station, location, and channel code (NET.STA.LOC.CHA). The computational
  power required to split the attributes again and it results in a more
  readable definition and PROV XML file.

Entities
^^^^^^^^

*SEIS_PROV* determines the type of entity via the ``prov:type`` attribute which
can be one of the following choices. Further types will be added as requested
by the community.

.. contents::
    :local:
    :depth: 1


{entities}


Activities
^^^^^^^^^^

*SEIS_PROV* determines the type of activity via the ``prov:type`` attribute
which can be one of the following choices. Further types will be added as
requested by the community.

.. contents::
    :local:
    :depth: 1

{activities}


Usage Examples
--------------

This section shows some more extensive examples demonstrating that SEIS PROV
can be used to capture provenance for a wide of seismological relevant
applications. Keep in mind that these diagrams describe the history of some
piece of data, not a workflow.  The **arrows point towards the past**, e.g. to
the origin of the data.

.. note::
    `Right click -> View Image` to see graphs in more detail.

.. contents::
    :local:
    :depth: 1


Detailed Processing Chain
^^^^^^^^^^^^^^^^^^^^^^^^^^

This example demonstrates how a linear chain of signal processing routines can
be described.  The data has been detrended with a linear fit, then a
Butterworth lowpass filter has been applied and finally some integer decimation
has been performed. All of these operations where performed by a certain
version of ObsPy. Toolboxes can be adapted to provide this kind of provenance
fully automatic.

.. graphviz:: code/dot/example_detailed_processing_chain.dot


.. literalinclude:: code/xml/example_detailed_processing_chain.xml
    :language: xml

Schematic Processing Chain
^^^^^^^^^^^^^^^^^^^^^^^^^^

Sometimes not all information needs to be captured for a given application and
SEIS PROV is flexible enough to also allow a qualitative description of a
workflow. This is the same example as above but with less information. This
could be treated as a schema on how to process a large amount of data
independent of the used software and actual data.

.. graphviz:: code/dot/example_schematic_processing_chain.dot


.. literalinclude:: code/xml/example_schematic_processing_chain.xml
    :language: xml


Waveform Simulation
^^^^^^^^^^^^^^^^^^^

This fairly realistic example demonstrates how the waveform files resulting
from a numerical simulation can be described. This example does use some of the
more advanced future of the W3C PROV data model which are useful in many
contexts. Note that the waveform simulation activity has start- and endtimes
and that SPECFEM in this example actually has been steered by a certain person.

The amount of information to store has to be decided by the given application.
The general idea is to store those input file parameters that actually have an
effect on the output. It might also be useful to store information about the
machine is was run on in the provenance information but that is not shown here.

The implementation of this in a waveform solver is fairly simple by just using
an existing SEIS PROV XML file as a template and adjusting the information
dynamically. No need to incorporate an actual XML library.


.. graphviz:: code/dot/example_waveform_simulation.dot

.. literalinclude:: code/xml/example_waveform_simulation.xml
    :language: xml

Cross Correlation
^^^^^^^^^^^^^^^^^

.. graphviz:: code/dot/example_cross_correlation.dot

.. literalinclude:: code/xml/example_cross_correlation.xml
    :language: xml
